/*
 *   MIT License
 *
 *   Copyright (c) 2020 Fluence Labs Limited
 *
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *   of this software and associated documentation files (the "Software"), to deal
 *   in the Software without restriction, including without limitation the rights
 *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *   copies of the Software, and to permit persons to whom the Software is
 *   furnished to do so, subject to the following conditions:
 *
 *   The above copyright notice and this permission notice shall be included in all
 *   copies or substantial portions of the Software.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *   SOFTWARE.
 */

import * as PeerInfo from "peer-info";
import * as PeerId from "peer-id";
import {FluenceClient} from "./fluence_client";


export default class Fluence {

    /**
     * Generates new peer id with Ed25519 private key.
     */
    static async generatePeerId(): Promise<PeerId> {
        return await PeerId.create({keyType: "Ed25519"});
    }

    /**
     * Connect to Fluence node.
     *
     * @param hostPeerId peer id to identify connection to the node
     *
     * @param host node address
     * @param port node port
     * @param peerId your peer id. Should be with a private key. Could be generated by `generatePeerId()` function
     */
    static async connect(hostPeerId: string, host: string, port: number, peerId: PeerId): Promise<FluenceClient> {
        let peerInfo = await PeerInfo.create(peerId);

        let client = new FluenceClient(peerInfo);

        await client.connect(hostPeerId, host, port);

        return client;
    }
}